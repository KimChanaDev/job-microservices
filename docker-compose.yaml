# Docker Compose file for Jobber Microservices
# Environment: Development
# Note: set DOCKER_BUILDKIT=0 for fix problem "changes out of order"

services:
  postgres:
    image: postgres:17.6
    container_name: jobber-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: apachepulsar/pulsar:4.1.1
    container_name: jobber-pulsar
    command: bin/pulsar standalone
    restart: on-failure
    ports:
      - "6650:6650"
      - "8080:8080"

  # Auth Service
  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    container_name: jobber-auth
    ports:
      - '3000:3000'  # HTTP port
      - '5000:5000'  # gRPC port
    environment:
      - NODE_ENV=development
      - AUTH_APP_VERSION=latest
      - AUTH_PORT=3000
      - AUTH_GRPC_URL=0.0.0.0:5000
      - AUTH_JWT_SECRET=YxD1NH9ox4zu81AoiTEng10kVgPOYIhf
      - AUTH_JWT_EXPIRATION_MS=2880000
      - AUTH_SECURE_COOKIES=false
      - AUTH_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/auth
      - PULSAR_SERVICE_URL=pulsar://broker:6650
    entrypoint: ["/app/entrypoint.sh"]
    command: ["npm", "run", "start:auth:prod"]
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/auth/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jobs Service
  jobs:
    build:
      context: .
      dockerfile: apps/jobs/Dockerfile
    container_name: jobber-jobs
    ports:
      - '3001:3001'  # HTTP port
      - '5002:5002'  # gRPC port
    environment:
      - NODE_ENV=development
      - JOBS_APP_VERSION=latest
      - JOBS_PORT=3001
      - JOBS_GRPC_URL=0.0.0.0:5002
      - AUTH_GRPC_URL=auth:5000
      - JOBS_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/jobs
      - PULSAR_SERVICE_URL=pulsar://broker:6650
    entrypoint: ["/app/entrypoint.sh"]
    command: ["npm", "run", "start:jobs:prod"]
    volumes:
      - jobs_uploads:/app/apps/jobs/uploads
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/jobs/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Executor Service
  executor:
    build:
      context: .
      dockerfile: apps/executor/Dockerfile
    container_name: jobber-executor
    ports:
      - '3002:3002'  # HTTP port
    environment:
      - NODE_ENV=development
      - EXECUTOR_APP_VERSION=latest
      - EXECUTOR_PORT=3002
      - PRODUCTS_GRPC_URL=products:5001
      - JOBS_GRPC_URL=jobs:5002
      - PULSAR_SERVICE_URL=pulsar://broker:6650
    command: ["npm", "run", "start:executor:prod"]
    depends_on:
      broker:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/executor/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Products Service
  products:
    build:
      context: .
      dockerfile: apps/products/Dockerfile
    container_name: jobber-products
    ports:
      - '3003:3003'  # HTTP port
      - '5001:5001'  # gRPC port
    environment:
      - NODE_ENV=development
      - PRODUCTS_APP_VERSION=latest
      - PRODUCTS_PORT=3003
      - PRODUCTS_GRPC_URL=0.0.0.0:5001
      - PRODUCTS_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/products
      - PULSAR_SERVICE_URL=pulsar://broker:6650
    entrypoint: ["/app/entrypoint.sh"]
    command: ["npm", "run", "start:products:prod"]
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/products/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  jobs_uploads:
